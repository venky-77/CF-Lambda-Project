AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Lambda, Scheduler Group, and Schedule using existing IAM roles

Parameters:
  ExistingLambdaExecutionRoleArn:
    Type: String
    Default: arn:aws:iam::794038240530:role/lambda-role
    Description: ARN of the existing Lambda execution role

  ExistingSchedulerExecutionRoleArn:
    Type: String
    Default: arn:aws:iam::794038240530:role/service-role/Amazon_EventBridge_Scheduler_LAMBDA_7370da942a
    Description: ARN of the existing EventBridge Scheduler execution role

Resources:

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyScheduledLambda
      Handler: index.handler
      Role: !Ref ExistingLambdaExecutionRoleArn
      Runtime: python3.9
      Code:
        ZipFile: |
          def handler(event, context):
              print("Lambda triggered by EventBridge Scheduler Group")
              return

  # MySchedulerGroup:
  #   Type: AWS::Scheduler::ScheduleGroup
  #   Properties:
  #     Name: MySchedulerGroup
  #     Tags:
  #       - Key: Project
  #         Value: EventAutomation
  #       - Key: Owner
  #         Value: CloudTeam
  #       - Key: Environment
  #         Value: Production

  EventBridgeSchedulerRule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: MyFiveMinuteScheduler
      ScheduleExpression: rate(5 minutes)
      FlexibleTimeWindow:
        Mode: "OFF"
      State: ENABLED  
      GroupName: default
      Target:
        Arn: !GetAtt MyLambdaFunction.Arn
        RoleArn: !Ref ExistingSchedulerExecutionRoleArn
        Input: '{}'

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref MyLambdaFunction

  # SchedulerGroupName:
  #   Description: Name of the EventBridge Scheduler group
  #   Value: !Ref MySchedulerGroup

  SchedulerRuleName:
    Description: Name of the EventBridge Scheduler rule
    Value: !Ref EventBridgeSchedulerRule

  LambdaExecutionRoleArn:
    Description: Passed-in ARN of the Lambda execution role
    Value: !Ref ExistingLambdaExecutionRoleArn

  SchedulerExecutionRoleArn:
    Description: Passed-in ARN of the Scheduler execution role
    Value: !Ref ExistingSchedulerExecutionRoleArn

# Parameters:
#   LambdaFunctionName:
#     Type: String
#     Default: UnloadJobLambda
#   ScheduleExpression:
#     Type: String
#     Default: rate(15 minutes)
#   LambdaExecutionRoleArn:
#     Type: String
# 	Default: arn:aws:iam::794038240530:role/lambda-role
#     Description: ARN of existing IAM role for Lambda

# Resources:
#   UnloadLambdaFunction:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: !Ref LambdaFunctionName
#       Handler: index.handler
#       Role: !Ref LambdaExecutionRoleArn
#       Runtime: python3.9
#       Code:
#         ZipFile: |
#           def handler(event, context):
#               print("Lambda triggered by EventBridge Scheduler Group")
#               return

#   EventBridgeRule:
#     Type: AWS::Events::Rule
#     Properties:
#       Name: !Sub "${LambdaFunctionName}-Scheduler"
#       ScheduleExpression: !Ref ScheduleExpression
#       State: ENABLED
#       Targets:
#         - Arn: !GetAtt UnloadLambdaFunction.Arn
#           Id: LambdaTarget

AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda triggered by EventBridge schedule

Resources:
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyScheduledLambda
      Handler: index.lambda_handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import datetime
          def lambda_handler(event, context):
              print("Lambda triggered at:", datetime.datetime.utcnow())
              return {"statusCode": 200, "body": "Triggered successfully"}

  MyEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: LambdaScheduleRule
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: LambdaTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MyEventBridgeRule.Arn

Outputs:
  LambdaFunctionName:
    Description: Lambda function name
    Value: !Ref MyLambdaFunction



